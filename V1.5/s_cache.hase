//
// Project:	DASH node
// Entity:	Secondary Cache
// File:	s_cache.hase
// Date:	23 Oct 2001

// Originally Written by Lawrence Williams  7/95
// Modified by Roland Ibbett

// MIPS R3000 Secondary Processor Cache
// Direct Mapped with Write-Back policy.
//

$class_decls

/* Message containiers */

p1_struct pkt_from_p_cache;  // Packet inbound from p_cache.
p1_struct pkt_to_p_cache;    // Packet bound for p_cache.
p1_struct pkt_to_mp_bus;     // Packet bound for mp_bus. 
p1_struct pkt_from_mp_bus;   // Packet inbound from mp_bus.   

// sim_event ev;                  // The event container.

/* Vars for cache related calculations         */
/* these are used to caclulate cache positions */
/* etc. via use of entity parameters / globals */                

int s_cache_size;
int clus_mem_size;
int add_req;                   // Requested address
int cm_block;                  // Cluster memory block in which address resides
int slot;                      // Cache slot for this entry.
int tag;                       // Cache tag for this address.
int tag_boundary;              // Where tag boundarys fall in clus_memory.	

char action;                   // Is operation 'r'ead or 'w'rite 
ca_line_struct current_line; // Current cache memory line.
int refer;                    // referal to memory?
int count;
void do_mpbus_event(sim_event&);
void do_p_cache_event(sim_event&);

$class_defs

void s_cache::do_mpbus_event(sim_event &ev){

	SIM_CAST(p1_struct,pkt_from_mp_bus,ev);
		
	/* this event is simply updating the cache with     */
	/* a value from cluster memory ...                  */
	/* NOTE as this cache is write-back we should check */
	/* if replaced lines have been modified, if so we   */
	/* need to 'write-back'!                            */
				
	add_req=pkt_from_mp_bus.p1_address;			
	cm_block=(add_req/4);
	slot = cm_block % s_cache_size;
	tag = (add_req / 4) / s_cache_size;

	// simulate processing delay

	status0='_';
	status1='_';
	
	dump_state();



	if (cache[slot].ca_mod==1){ // This line has been modified
				    // therefore do write-back.
			
		pkt_to_mp_bus.p1_address = cache[slot].ca_add1;
		pkt_to_mp_bus.p1_rw[0]   = 'u'; // write-update mode.
		pkt_to_mp_bus.p1_id[0]   = 'd';  // must be data!

		send_DATAPKT(to_mp_bus,pkt_to_mp_bus);
	}

	current_line.ca_valid=1;
	current_line.ca_tag=tag;
	current_line.ca_cm_block=cm_block;
	current_line.ca_add1=(4*cm_block);
	current_line.ca_add2=(4*cm_block)+1;		
	current_line.ca_add3=(4*cm_block)+2;
	current_line.ca_add4=(4*cm_block)+3;
	current_line.ca_mod=0;
	
	//cache[slot]=current_line;
	cache.Update(slot,current_line);
	dump_state();	
	sim_hold(S_delay);				
	pkt_to_p_cache.p1_address = pkt_from_mp_bus.p1_address;
       	strcpy(pkt_to_p_cache.p1_rw,pkt_from_mp_bus.p1_rw);
	strcpy(pkt_to_p_cache.p1_id,pkt_from_mp_bus.p1_id);

	send_DATAPKT(to_p_cache,pkt_to_p_cache);
}


/*************************/
/* Handle p_cache events */
/*************************/


void s_cache::do_p_cache_event(sim_event &ev){

	SIM_CAST(p1_struct,pkt_from_p_cache,ev);

	add_req=pkt_from_p_cache.p1_address;

	/* Given requested address find out:            */
	/*	- its cluster memory block   (cm_block) */
	/*	- its cache slot             (slot)     */
	/*	- its cache tag              (tag)      */
		
	cm_block=(add_req/4);
	slot = cm_block % s_cache_size;
	tag = (add_req / 4) / s_cache_size;

	/* Now classify the action read/write */
		
	action = (char) pkt_from_p_cache.p1_rw[0];
	if (action=='r') {
		
		/* Read cycle - check for existing cache entry */
		/* check for validity and tag match            */

		current_line=cache[slot];
		if (current_line.ca_valid==0){

			/*invalid cache line therefore fetch.. */
			refer=1;
			status0='R';
			status1='M';
			my_state=S_MISS;
			dump_state();
		}else{

			/*valid cache line - now check tag */
			if (current_line.ca_tag!=tag){
					
				/* tag mismatch - refer */
				refer=1;
				status0='R';
				status1='M';
				my_state=S_MISS;
				dump_state();
			}else{
				/* Hit!!*/
				// do nothing. return pkt later.
			    status0='R';
			    status1='H';
			    my_state=S_HIT;
			    dump_state();
			}
		}
	}else {

		/* write cycle - write back cache */
		/* check whether write hit/miss   */

		add_req=pkt_from_p_cache.p1_address;
		cm_block=(add_req/4);
		slot = cm_block % s_cache_size;
		tag = (add_req / 4) / s_cache_size;
		current_line=cache[slot];
		if (current_line.ca_valid==0){

			/*invalid cache line therefore fetch.. */
			refer=1;
			status0='W';
			status1='M';
			my_state=S_MISS;
			dump_state();
	 	}else{
			/*valid cache line - now check tag */
			if (current_line.ca_tag!=tag){
					
				/* tag mismatch - refer */
				refer=1;
				status0='W';
				status1='M';
				my_state=S_MISS;
				dump_state();
			}else{
				/* Hit!!*/
				// note modification.
			    status0='W';
			    status1='H';
			    my_state=S_HIT;
			    dump_state();
			    current_line.ca_mod=1;
			    // cache[slot]=current_line;
			    cache.Update(slot,current_line);
			}
		}
	}
	
	/* now simulate cache delay */

	if (action=='r'){
		sim_hold(S_delay);	
		my_state=S_IDLE;
		dump_state();

		/* is there a referal to cluster memory? */

		if (refer != 0){
			pkt_to_mp_bus.p1_address = pkt_from_p_cache.p1_address;
        		strcpy(pkt_to_mp_bus.p1_rw,pkt_from_p_cache.p1_rw);
			strcpy(pkt_to_mp_bus.p1_id,pkt_from_p_cache.p1_id);

			send_DATAPKT(to_mp_bus,pkt_to_mp_bus);
		}else{
			/* send back hit */
				
			pkt_to_p_cache.p1_address = pkt_from_p_cache.p1_address;
        		strcpy(pkt_to_p_cache.p1_rw,pkt_from_p_cache.p1_rw);
			strcpy(pkt_to_p_cache.p1_id,pkt_from_p_cache.p1_id);

			send_DATAPKT(to_p_cache,pkt_to_p_cache);
			status0='_';
			status1='_';
			dump_state();
		}

	}else{  // write mode

		sim_hold(S_delay);
		my_state=S_IDLE;
		dump_state();

		if (refer != 0){
			pkt_to_mp_bus.p1_address = pkt_from_p_cache.p1_address;
        		strcpy(pkt_to_mp_bus.p1_rw,pkt_from_p_cache.p1_rw);
			strcpy(pkt_to_mp_bus.p1_id,pkt_from_p_cache.p1_id);

			send_DATAPKT(to_mp_bus,pkt_to_mp_bus);
		}else{
// modified by rni, 19-03-2003 to send Wack on a hit or a miss
 //if (pkt_from_p_cache.p1_rw[1]=='M')
			//{
			pkt_from_p_cache.p1_rw[1]=' ';
			pkt_to_p_cache=pkt_from_p_cache;
			pkt_to_p_cache.p1_rw[0]='W';
			pkt_to_p_cache.p1_rw[1]='A';
			pkt_to_p_cache.p1_rw[2]='c';
	 		pkt_to_p_cache.p1_rw[3]='k';
	 		send_DATAPKT(to_p_cache,pkt_to_p_cache);
			status0='_';
			status1='_';
			dump_state();
			//}
		}
			
	}
}

$body
			    
  s_cache_size  = 1 << S_size;
  clus_mem_size = 1 << Memory::M_size;

/* Caclulate cache tag range */

tag_boundary = (clus_mem_size / (s_cache_size*4));
current_line.ca_valid=0;
current_line.ca_tag=0;
current_line.ca_cm_block=0;
current_line.ca_add1=0;
current_line.ca_add2=0;		
current_line.ca_add3=0;
current_line.ca_add4=0;
current_line.ca_mod=0;
current_line.ca_share=0;

for (count=0;count<s_cache_size;count++){
	cache.Update(count,current_line);
}

status0='_';
status1='_';

my_state=S_IDLE;
dump_state();
while(1){

	/* Point of reference to event list for this entity */

	sim_get_next(ev);
	refer=0;

	/* Classify Event */

	if (ev.scheduled_by()==from_p_cache.get_dest()){
		do_p_cache_event(ev);          // Deal with P_cache events.

	}else{
		do_mpbus_event(ev);            // Deal with MPbus events.
	}
}











