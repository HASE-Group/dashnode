//
// Project:	DASH node
// Entity:	MIPS
// File:	mips.hase
// Date:	6 Feb 2006

// Originally Written by Lawrence Williams
// Modified by Roland Ibbett

// GLOBALS for this entity are as follows:
//    TC     - Psuedo Program Counter - Trace File Index Counter


$class_decls

// Variable Declarations

  mem_trace_struct trace_file_line;      // Holds a line of the trace file.
  p1_struct pkt_to_p_cache;              // Packet bound for p_cache.
  char action;
  int max_address;
  bool stop, error;

//entity references

  Timer * myTimer;

$body

// Initialise variables

  stop = false;
  TC = 0;
  myTimer = (Timer*)sim.get_entity(sim.get_entity_id("TIMER"));
  max_address =  1 << Memory::M_size;

// Generate addresses, from mem_trace file.

  error = false;
  action = 'r';
  my_state=M_WAITING;

while ((action != 'z') && (!error) && (!myTimer->stop))
{
	// update state info 

	dump_state();

	// model processor delay 

	sim_hold(MIPS_delay);

	// load next line of trace file in 

	trace_file_line = mem_trace[TC];  
	action = (char) trace_file_line.mt_rw[0];

	// set up and send the request for the address found 
        // in the trace file line to the primary cache! 

	pkt_to_p_cache.p1_address = trace_file_line.mt_address;
        strcpy(pkt_to_p_cache.p1_rw,trace_file_line.mt_rw);
	strcpy(pkt_to_p_cache.p1_id,trace_file_line.mt_id);

	// check address for NOP value of -1     (no longer used)
        // used to skip through input trace file 

	if (pkt_to_p_cache.p1_address > max_address
	  || pkt_to_p_cache.p1_address < 0)
	 {
	  error = true;
	 }

	else if ((pkt_to_p_cache.p1_address!=-1) && (action != 'z'))
	 {
	    send_DATAPKT(to_p_cache,pkt_to_p_cache);
	    TC ++;
	    my_state=M_WAITING;
	    dump_state();


	  sim_wait(ev);
	 }
	my_state=M_RUNNING;
	dump_state();
} 
stop = true;
my_state=M_STOPPED;
dump_state();

$report

  if(error)
   {printf("mem_trace %d contains an invalid memory address (%d)\n", TC, pkt_to_p_cache.p1_address);}
