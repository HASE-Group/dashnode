//
// Project:	DASH node
// Entity:	Primary Cache
// File:	p_cache.hase
// Date:	23 Oct 2001

// Originally Written by Lawrence Williams
// Modified by Roland Ibbett

// lmw@dcs    7/95 - Plain version
//         30/7/95 - OO version - add state dumps.
//
// MIPS R3000 1st level processor cache
// Direct mapped - write-through
//

$class_decls

/* Message Containers */

p1_struct pkt_from_mips;       // Packet inbound from mips.
p1_struct pkt_to_mips;         // Packet bound for mips.
p1_struct pkt_to_s_cache;      // Packet bound for s_cache.
p1_struct pkt_from_s_cache;    // Packet inbound from s_cache. 

/* Variables for cache related calculations */

int p_cache_size;
int clus_mem_size;
int add_req;                   // Requested address
int cm_block;                  // Cluster memory block
int slot;                      // Cache slot for this entry
int tag;                       // tag for this entry
int tag_boundary;              // Where tag boundarys fall in cluster memory.
char action;                   // is operation read / write?
int refer;
ca_line_struct current_line; // cache memory line processing space.
int count;                     // misc counter for loops.
 
void do_mips_event(sim_event&);
void do_s_cache_event(sim_event&);


$class_defs

void p_cache::do_mips_event(sim_event &ev){

    SIM_CAST(p1_struct, pkt_from_mips, ev);
    add_req=pkt_from_mips.p1_address;

    /* calculate where address lies in clus memory and cache */

    cm_block=(add_req/4);
    slot = cm_block % p_cache_size;
    tag = (add_req / 4) / p_cache_size;
    
    /* classify request as read or write */

    action = (char) pkt_from_mips.p1_rw[0];

    if (action=='r'){   // read cycle

	// check for validity / tag match
	current_line=cache[slot];
	
	if (current_line.ca_valid==0){

	    /* invalid cache line therefore refer */
	    refer=1;
	    status0='R';
	    status1='M';
	    my_state=P_MISS;
	    dump_state();
	}else{
	    /* valid cache line now check tag */
	    if (current_line.ca_tag!=tag){
		
	        /*tag mismatch - refer */
		refer=1;
		status0='R';
		status1='M';
		my_state=P_MISS;
		dump_state();
	    }else{
				/* hit ! */
				// do nothing - return packet later 
		status0='R';
		status1='H';
		my_state=P_HIT;
		dump_state();
	    }
	}
    }else{

	/* write cycle */
	add_req=pkt_from_mips.p1_address;
	cm_block=(add_req/4);
	slot = cm_block % p_cache_size;
	tag = (add_req / 4) / p_cache_size;
	current_line=cache[slot];

	if (current_line.ca_valid==0){
		      /* invalid cache line - therefore refer to 2nd cache */
	    refer=1;
	    status0='W';
	    status1='M';
	    my_state=P_MISS;
	    dump_state();
	}else{
	    
	   		/* valid cache line - check tag. */
	    if (current_line.ca_tag!=tag){
		
			/* tag mismatch - refer to 2nd cache */
		refer=1;
		status0='W';
		status1='M';
		my_state=P_MISS;
		dump_state();
	    }else{
				/* hit! */
				/* we shall make the write-through below */
		status0='W';
		status1='H';
		my_state=P_HIT;
		dump_state();
	    }
	}
    }

    /* now simulate cache delay and send approp. pkts */

    if (action=='r'){

	sim_hold(P_delay);
	my_state=P_IDLE;
	dump_state();

	/* is there referal to second cache? */

	if (refer != 0){
	    pkt_to_s_cache = pkt_from_mips;		
	    send_DATAPKT(to_s_cache,pkt_to_s_cache);
	}else{
				/* send back a hit! */
	    pkt_to_mips = pkt_from_mips;
	    send_DATAPKT(to_mips,pkt_to_mips);
	    status0='_';
	    status1='_';
	    dump_state();
	}
    }else{
	/* action = write */
	sim_hold(P_delay);
	my_state=P_IDLE;
	dump_state();
	if (refer != 0){
	    
		/* write miss -  note in fuller  implementation send */
		/* misses to write buffer and allow mips to overcome */
	        /* write-stall                                       */

	    pkt_to_s_cache = pkt_from_mips;
	    pkt_to_s_cache.p1_rw[1]='M';
	    send_DATAPKT(to_s_cache,pkt_to_s_cache);
	}else{
	       /* write hit */
	    pkt_to_s_cache = pkt_from_mips;
	    send_DATAPKT(to_s_cache,pkt_to_s_cache);

	    pkt_to_mips=pkt_from_mips;

	    pkt_to_mips.p1_rw[0]='W';
	    pkt_to_mips.p1_rw[1]='A';
	    pkt_to_mips.p1_rw[2]='c';
	    pkt_to_mips.p1_rw[3]='k';
//	    send_DATAPKT(to_mips,pkt_to_mips);
// shouldn't send this packet back to MIPS until ack of write through
// from S cache. Modified by rni, 19-03-2003.
	}
    }

}

void p_cache::do_s_cache_event(sim_event &ev){
	
       	SIM_CAST(p1_struct,pkt_from_s_cache,ev);

       	/* this event updates the cache with pkts from s_cache */

      if ((pkt_from_s_cache.p1_rw[0]=='W') || (pkt_from_s_cache.p1_rw[0]=='w'))

// Altered to ensure policy is "no write allocate" in Primary Cache.
// Returning packet from s_cache can be an ack (Wack) or miss (wM).
// Previously one allocated, the other didn't!  (rni 22/3/2002)

	   {
		status0='_';
		status1='_';		
		dump_state();	
		sim_hold(P_delay);
       		 my_state=P_IDLE;
		pkt_to_mips = pkt_from_s_cache;
		send_DATAPKT(to_mips,pkt_to_mips);
	}else{

	       	add_req = pkt_from_s_cache.p1_address;
       		cm_block=(add_req/4);
		slot = cm_block % p_cache_size;
		tag = (add_req / 4) / p_cache_size;

		/* reset state display */

		status0='_';
		status1='_';

		current_line.ca_valid=1;
		current_line.ca_tag=tag;
		current_line.ca_cm_block=cm_block;
		current_line.ca_add1=(4*cm_block);
		current_line.ca_add2=(4*cm_block)+1;		
		current_line.ca_add3=(4*cm_block)+2;
		current_line.ca_add4=(4*cm_block)+3;
		current_line.ca_mod=0;	

		//cache[slot]=current_line;
		cache.Update(slot,current_line);

		/* Simulate processing delay */

		sim_hold(P_delay);
       		 my_state=P_IDLE;
		dump_state_i();
		pkt_to_mips = pkt_from_s_cache;
		send_DATAPKT(to_mips,pkt_to_mips);
	}
}


$body

  p_cache_size = 1 << P_size;
  clus_mem_size = 1 << Memory::M_size;

/* calculate memory range of tag */

tag_boundary = (clus_mem_size / (p_cache_size*4));

/* Initialise the cache - set the state display */
/* and read in the cache meory file from disk.   */

current_line.ca_valid=0;
current_line.ca_mod=0;
current_line.ca_share=0;
current_line.ca_tag=0;
current_line.ca_cm_block=0;
current_line.ca_add1=0;
current_line.ca_add2=0;		
current_line.ca_add3=0;
current_line.ca_add4=0;

for (count=0;count<p_cache_size;count++){
	cache.Update(count,current_line);
}

status0='_';
status1='_';

my_state=P_IDLE;
dump_state();


while(1)
{
	sim_get_next(ev);
	refer=0;

	/* Classify Event */

        if  (ev.scheduled_by() == from_mips.get_dest()){
	    do_mips_event(ev);                // Deal with mips event
	}else{
	    do_s_cache_event(ev);             // Deal with s_cache_event
	}
}
